--
-- PostgreSQL database dump
--

-- Dumped from database version 12.0
-- Dumped by pg_dump version 12.0

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: <SCHEMA>; Type: SCHEMA; Schema: -; Owner: <OWNER>
--

CREATE SCHEMA <SCHEMA>;


ALTER SCHEMA <SCHEMA> OWNER TO <OWNER>;

CREATE ROLE <SCHEMA>_user;
CREATE ROLE <SCHEMA>_anon;

--
-- Name: jwt_token; Type: TYPE; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE TYPE <SCHEMA>.jwt_token AS (
	role text,
	user_id integer
);


ALTER TYPE <SCHEMA>.jwt_token OWNER TO <OWNER>;

--
-- Name: authenticate(text, text); Type: FUNCTION; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE FUNCTION <SCHEMA>.authenticate(email text, password text) RETURNS <SCHEMA>.jwt_token
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $_$
declare
  account <SCHEMA>.user_accounts;
begin
  select a.* into account
  from <SCHEMA>.user_accounts as a
  where a.email = $1;

  if account.password_hash = crypt(password, account.password_hash) then
    return ('<SCHEMA>_user', account.user_id)::<SCHEMA>.jwt_token;
  else
    return null;
  end if;
end;
$_$;


ALTER FUNCTION <SCHEMA>.authenticate(email text, password text) OWNER TO <OWNER>;

--
-- Name: FUNCTION authenticate(email text, password text); Type: COMMENT; Schema: <SCHEMA>; Owner: <OWNER>
--

COMMENT ON FUNCTION <SCHEMA>.authenticate(email text, password text) IS 'Creates a JWT token that will securely identify a person and give them certain permissions. This token expires in 1 day.';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: users; Type: TABLE; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE TABLE <SCHEMA>.users (
    id integer NOT NULL,
    first_name text,
    last_name text,
    created_on timestamp without time zone DEFAULT now()
);


ALTER TABLE <SCHEMA>.users OWNER TO <OWNER>;

--
-- Name: current_user(); Type: FUNCTION; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE FUNCTION <SCHEMA>."current_user"() RETURNS <SCHEMA>.users
    LANGUAGE sql STABLE
    AS $$
  select *
  from <SCHEMA>.users
  where id = nullif(current_setting('jwt.claims.user_id', true), '')::integer
$$;


ALTER FUNCTION <SCHEMA>."current_user"() OWNER TO <OWNER>;

--
-- Name: FUNCTION "current_user"(); Type: COMMENT; Schema: <SCHEMA>; Owner: <OWNER>
--

COMMENT ON FUNCTION <SCHEMA>."current_user"() IS 'Gets the person who was identified by our JWT.';


--
-- Name: register_user(text, text, text, text); Type: FUNCTION; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE FUNCTION <SCHEMA>.register_user(first_name text, last_name text, email text, password text) RETURNS <SCHEMA>.users
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $$
declare
  users <SCHEMA>.users;
begin
  insert into <SCHEMA>.users (first_name, last_name) values
    (first_name, last_name)
    returning * into users;

  insert into <SCHEMA>.user_accounts (user_id, email, password_hash) values
    (users.id, email, crypt(password, gen_salt('bf')));

  return users;
end;
$$;


ALTER FUNCTION <SCHEMA>.register_user(first_name text, last_name text, email text, password text) OWNER TO <OWNER>;

--
-- Name: FUNCTION register_user(first_name text, last_name text, email text, password text); Type: COMMENT; Schema: <SCHEMA>; Owner: <OWNER>
--

COMMENT ON FUNCTION <SCHEMA>.register_user(first_name text, last_name text, email text, password text) IS 'Registers a single user and creates an account.';


--
-- Name: user_accounts; Type: TABLE; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE TABLE <SCHEMA>.user_accounts (
    user_id integer NOT NULL,
    email text NOT NULL,
    password_hash text NOT NULL,
    CONSTRAINT user_accounts_email_check CHECK ((email ~* '^.+@.+\..+$'::text))
);


ALTER TABLE <SCHEMA>.user_accounts OWNER TO <OWNER>;


--
-- Name: users_id_seq; Type: SEQUENCE; Schema: <SCHEMA>; Owner: <OWNER>
--

CREATE SEQUENCE <SCHEMA>.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE <SCHEMA>.users_id_seq OWNER TO <OWNER>;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: <SCHEMA>; Owner: <OWNER>
--

ALTER SEQUENCE <SCHEMA>.users_id_seq OWNED BY <SCHEMA>.users.id;


--
-- Name: users id; Type: DEFAULT; Schema: <SCHEMA>; Owner: <OWNER>
--

ALTER TABLE ONLY <SCHEMA>.users ALTER COLUMN id SET DEFAULT nextval('<SCHEMA>.users_id_seq'::regclass);

--
-- Name: user_accounts user_accounts_email_key; Type: CONSTRAINT; Schema: <SCHEMA>; Owner: <OWNER>
--

ALTER TABLE ONLY <SCHEMA>.user_accounts
    ADD CONSTRAINT user_accounts_email_key UNIQUE (email);


--
-- Name: user_accounts user_accounts_pkey; Type: CONSTRAINT; Schema: <SCHEMA>; Owner: <OWNER>
--

ALTER TABLE ONLY <SCHEMA>.user_accounts
    ADD CONSTRAINT user_accounts_pkey PRIMARY KEY (user_id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: <SCHEMA>; Owner: <OWNER>
--

ALTER TABLE ONLY <SCHEMA>.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);
    

--
-- Name: user_accounts user_accounts_user_id_fkey; Type: FK CONSTRAINT; Schema: <SCHEMA>; Owner: <OWNER>
--

ALTER TABLE ONLY <SCHEMA>.user_accounts
    ADD CONSTRAINT user_accounts_user_id_fkey FOREIGN KEY (user_id) REFERENCES <SCHEMA>.users(id) ON DELETE CASCADE;


--
-- Name: SCHEMA <SCHEMA>; Type: ACL; Schema: -; Owner: <OWNER>
--

GRANT USAGE ON SCHEMA <SCHEMA> TO <SCHEMA>_anon;
GRANT USAGE ON SCHEMA <SCHEMA> TO <SCHEMA>_user;


--
-- Name: FUNCTION authenticate(email text, password text); Type: ACL; Schema: <SCHEMA>; Owner: <OWNER>
--

GRANT ALL ON FUNCTION <SCHEMA>.authenticate(email text, password text) TO <SCHEMA>_anon;
GRANT ALL ON FUNCTION <SCHEMA>.authenticate(email text, password text) TO <SCHEMA>_user;


--
-- Name: TABLE users; Type: ACL; Schema: <SCHEMA>; Owner: <OWNER>
--

GRANT SELECT,UPDATE ON TABLE <SCHEMA>.users TO <SCHEMA>_user;


--
-- Name: FUNCTION register_user(first_name text, last_name text, email text, password text); Type: ACL; Schema: <SCHEMA>; Owner: <OWNER>
--

GRANT ALL ON FUNCTION <SCHEMA>.register_user(first_name text, last_name text, email text, password text) TO <SCHEMA>_anon;


--
-- Name: TABLE user_accounts; Type: ACL; Schema: <SCHEMA>; Owner: <OWNER>
--

GRANT SELECT ON TABLE <SCHEMA>.user_accounts TO <SCHEMA>_user;


--
-- Name: SEQUENCE users_id_seq; Type: ACL; Schema: <SCHEMA>; Owner: <OWNER>
--

GRANT SELECT,USAGE ON SEQUENCE <SCHEMA>.users_id_seq TO <SCHEMA>_user;
GRANT SELECT,USAGE ON SEQUENCE <SCHEMA>.users_id_seq TO <SCHEMA>_anon;


--
-- PostgreSQL database dump complete
--
